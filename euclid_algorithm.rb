# 2 つの整数 A , B の最大公約数（以後 gcd(A , B)）を高速に求めるアルゴリズムとして、
# ユークリッドの互除法があります。
# gcd(A, B) をユークリッドの互除法で求める手順は次の通りです。
# 1. A , B のうち、いずれかが 0 の場合 手順 3 に進む
# 2. A , B のうち小さい方で大きい方をわり、大きい方をその余りで置き換え、手順 1 に戻る
# 3. このとき、0 でない方の数が求めたい最大公約数になっている。
# b     a
# 40 = 15 * 2 + 10
# 15 = 10 * 1 + 5
# 10 = 5 * 2 + 0

# 入力例1
# 45 15
# 出力例1
# 15

# 入力例2
# 2 7
# 出力例2
# 1

def gcd(a, b) # ユークリッドの互除法
    if a > b
        a, b = b, a
    end
    if (a != 0) && (b != 0)
        a, b = b % a, a
        gcd(a, b)
    else
        return not_zero(a,b)
    end
end

def not_zero(*num)
    num.select { |n| n != 0 }
end

a, b = gets.split(' ').map(&:to_i)
puts gcd(a, b)